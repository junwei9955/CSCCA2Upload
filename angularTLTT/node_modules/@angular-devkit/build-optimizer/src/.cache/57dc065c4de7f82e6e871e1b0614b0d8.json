{"remainingRequest":"D:\\SP\\YEAR 3\\CSC\\CA2\\angularTLTT\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\SP\\YEAR 3\\CSC\\CA2\\angularTLTT\\node_modules\\ng-recaptcha\\recaptcha\\recaptcha.component.js","dependencies":[{"path":"D:\\SP\\YEAR 3\\CSC\\CA2\\angularTLTT\\node_modules\\ng-recaptcha\\recaptcha\\recaptcha.component.js","mtime":1524857599000},{"path":"D:\\SP\\YEAR 3\\CSC\\CA2\\angularTLTT\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1533220332000},{"path":"D:\\SP\\YEAR 3\\CSC\\CA2\\angularTLTT\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1533220284000}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar core_1 = require(\"@angular/core\");\nvar recaptcha_loader_service_1 = require(\"./recaptcha-loader.service\");\nvar recaptcha_settings_1 = require(\"./recaptcha-settings\");\nvar nextId = 0;\nvar RecaptchaComponent = /** @class */ /*@__PURE__*/ (function () {\n    function RecaptchaComponent(elementRef, loader, zone, settings) {\n        this.elementRef = elementRef;\n        this.loader = loader;\n        this.zone = zone;\n        this.id = \"ngrecaptcha-\" + nextId++;\n        this.resolved = new core_1.EventEmitter();\n        if (settings) {\n            this.siteKey = settings.siteKey;\n            this.theme = settings.theme;\n            this.type = settings.type;\n            this.size = settings.size;\n            this.badge = settings.badge;\n        }\n    }\n    RecaptchaComponent.prototype.ngAfterViewInit = function () {\n        var _this = this;\n        this.subscription = this.loader.ready.subscribe(function (grecaptcha) {\n            if (grecaptcha != null) {\n                _this.grecaptcha = grecaptcha;\n                _this.renderRecaptcha();\n            }\n        });\n    };\n    RecaptchaComponent.prototype.ngOnDestroy = function () {\n        // reset the captcha to ensure it does not leave anything behind\n        // after the component is no longer needed\n        this.grecaptchaReset();\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    };\n    /**\n     * Executes the invisible recaptcha.\n     * Does nothing if component's size is not set to \"invisible\".\n     */\n    RecaptchaComponent.prototype.execute = function () {\n        if (this.size !== 'invisible') {\n            return;\n        }\n        if (this.widget != null) {\n            this.grecaptcha.execute(this.widget);\n        }\n    };\n    RecaptchaComponent.prototype.reset = function () {\n        if (this.widget != null) {\n            if (this.grecaptcha.getResponse(this.widget)) {\n                // Only emit an event in case if something would actually change.\n                // That way we do not trigger \"touching\" of the control if someone does a \"reset\"\n                // on a non-resolved captcha.\n                this.resolved.emit(null);\n            }\n            this.grecaptchaReset();\n        }\n    };\n    /** @internal */\n    RecaptchaComponent.prototype.expired = function () {\n        this.resolved.emit(null);\n    };\n    /** @internal */\n    RecaptchaComponent.prototype.captchaReponseCallback = function (response) {\n        this.resolved.emit(response);\n    };\n    /** @internal */\n    RecaptchaComponent.prototype.grecaptchaReset = function () {\n        var _this = this;\n        if (this.widget != null) {\n            this.zone.runOutsideAngular(function () { return _this.grecaptcha.reset(_this.widget); });\n        }\n    };\n    /** @internal */\n    RecaptchaComponent.prototype.renderRecaptcha = function () {\n        var _this = this;\n        this.widget = this.grecaptcha.render(this.elementRef.nativeElement, {\n            badge: this.badge,\n            callback: function (response) {\n                _this.zone.run(function () { return _this.captchaReponseCallback(response); });\n            },\n            'expired-callback': function () {\n                _this.zone.run(function () { return _this.expired(); });\n            },\n            sitekey: this.siteKey,\n            size: this.size,\n            tabindex: this.tabIndex,\n            theme: this.theme,\n            type: this.type,\n        });\n    };\n    RecaptchaComponent.decorators = [\n        { type: core_1.Component, args: [{\n                    exportAs: 'reCaptcha',\n                    selector: 're-captcha',\n                    template: \"\",\n                },] },\n    ];\n    RecaptchaComponent.propDecorators = {\n        'id': [{ type: core_1.Input }, { type: core_1.HostBinding, args: ['attr.id',] },],\n        'siteKey': [{ type: core_1.Input },],\n        'theme': [{ type: core_1.Input },],\n        'type': [{ type: core_1.Input },],\n        'size': [{ type: core_1.Input },],\n        'tabIndex': [{ type: core_1.Input },],\n        'badge': [{ type: core_1.Input },],\n        'resolved': [{ type: core_1.Output },],\n    };\n    return RecaptchaComponent;\n}());\nexports.RecaptchaComponent = RecaptchaComponent;\n",null]}